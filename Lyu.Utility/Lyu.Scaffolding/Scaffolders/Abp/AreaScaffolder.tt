<#@ template language="C#" debug="True" #>
<#@ output extension="text" #>

<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="$(ProjectDir)\bin\Debug\Lyu.Scaffolding.dll" #>

<#@ Assembly Name="$(SolutionDir)\Lyutemplate.Web\bin\Abp.dll" #>
<#@ Assembly Name="$(SolutionDir)\LyuTemplate.Core\bin\Debug\Lyutemplate.Core.dll" #>
<#// Assembly Name="$(SolutionDir)\Lyutemplate.Web\bin\Abp.Zero.dll" #>

<#@ assembly name="EnvDTE" #>
<#@ import namespace="System.IO" #>
<#@ Import Namespace="System.Linq" #>
<#@ Import Namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="Lyu.Scaffolding.Models" #>
<#@ import namespace="Lyu.Scaffolding.Scaffolders.Abp" #>
<#@ import namespace="Lyu.Scaffolding.Domain" #>
<#@ import namespace="Lyu.Scaffolding.Utils" #>
<#@ import namespace="Lyu.Scaffolding.Models" #>

//模型
<#@ import namespace="LyuTemplate.Domain.Products" #>

<#@ include file="T4Toolbox.tt" #>
<#@ include file="AbpTemplate.tt" #>
<#@ include file="../CSharpHelpers.tt" #>


<#@ include file="Templates\Areas\AreaRegistration.tt" #>
<#@ include file="Templates\Areas\Views\web.tt" #>
<#@ include file="Templates\Areas\Views\_ViewStart.tt" #>
<#@ include file="Templates\Areas\Views\Entity\Index.tt" #>
<#@ include file="Templates\Areas\Controllers\Controller.tt" #>
<#@ include file="Templates\Areas\Views\Entity\Edit.tt" #>
<#@ include file="Templates\Areas\js\Entity.tt" #>
<#

				string currentPath = Path.GetDirectoryName(Host.TemplateFile);
				string projectPath = currentPath.Substring(0, currentPath.IndexOf(@"\Scaffolders"));
            
				var type = typeof(LyuTemplate.Domain.Products.Product);
				var templateParams = new TemplateParams();
				templateParams.EntityName = type.Name;
				templateParams.entityName = ToCamelCase(templateParams.EntityName);
				templateParams.EntityNamespace = type.Namespace;
				templateParams.ModuleNamespace = getModuleNamespace(templateParams.EntityNamespace);
				templateParams.ModuleName = getModuleName(templateParams.ModuleNamespace);
				templateParams.FunctionFolderName = getModuleName(templateParams.EntityNamespace);
				templateParams.FunctionName ="FunctionName";
				templateParams.ProjectNamespace ="ProjectNamespace";
				templateParams.AllowBatchDelete = true;
				templateParams.IsDisplayOrderable = IsDisplayOrderable(type);
				WriteLine("---------------------------");
				WriteLine("type.FullName:"+type.FullName);
				WriteLine("templateParams.EntityName:"+templateParams.EntityName);
				WriteLine("templateParams.entityName:"+templateParams.entityName);
				WriteLine("templateParams.EntityNamespace:"+templateParams.EntityNamespace);
				WriteLine("templateParams.ModuleNamespace:"+templateParams.ModuleNamespace);
				WriteLine("templateParams.ModuleName:"+templateParams.ModuleName);

                MetaTableInfo dataModel = new MetaTableInfo();
                foreach (var propertyInfo in type.GetProperties())
                {
                    var metaColumnInfo = new MetaColumnInfo(propertyInfo);
					if(metaColumnInfo.Name != "Id")
						dataModel.Columns.Add(metaColumnInfo);
                }
                templateParams.DtoMetaTable = dataModel;
                templateParams.ItemMetaTable = dataModel;

				var templates = new AbpTemplate[]{
						new Entity(templateParams),
						new AreaRegistration(templateParams),
						new Controller(templateParams),
						new Index(templateParams),
						new Edit(templateParams)
				 };
				

				string outputPath = Path.Combine(projectPath,@"_GeneratedCode\");
				foreach(var template in templates){
					
					template.Output.Encoding = Encoding.UTF8;
					template.RenderToFile(Path.Combine(outputPath,template.FileName()));
				}
				AddShareFile("aa",templateParams);
			

			IServiceProvider serviceProvider = (IServiceProvider)this.Host;

#>



<#+
		
		private void AddShareFile(string moduleName, TemplateParams templateParams)
        {
			var templates = new AbpTemplate[]{
						new ViewStart(templateParams),
						new web(templateParams)
				 };
          
			string currentPath = Path.GetDirectoryName(Host.TemplateFile);
			string projectPath = currentPath.Substring(0, currentPath.IndexOf(@"\Scaffolders"));
			string outputPath = Path.Combine(projectPath,@"_GeneratedCode\");
            foreach (var template in templates)
            {
				template.Output.Encoding = Encoding.UTF8;
				template.RenderToFile(Path.Combine(outputPath,template.FileName()));
            }
        }

		private void WriteLog(string str)
        {
            File.AppendAllText("D:\\Scaffolder.log.txt", str + "\r\n");
        }

		private string getModuleName(string moduleNamespace)
        {
            return moduleNamespace.Split('.').Last();
        }

        private string getModuleNamespace(string entityNamespace)
        {
            var list = entityNamespace.Split('.').ToList();
            if (entityNamespace.Contains("YMC.Entities."))  //YMC.Entities.Content  
            {
                return "YMC.ECCentral." + list[2];
            }
            if (list.Contains("Domain"))  //命名空间包含Domain时， 去除Domain以后的
            {
                int index = list.IndexOf("Domain");
                if (index > 0)
                {
                    list.RemoveRange(index, list.Count - index);
                }
            }
            return string.Join(".", list);
        }

		private bool IsDisplayOrderable(Type entity)
        {
            return entity.GetInterface("IDisplayOrderable",true) != null;
        }

#>