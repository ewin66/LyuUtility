<#@ template language="C#" debug="True" #>
<#@ output extension="text" #>

<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="$(ProjectDir)\bin\Debug\Lyu.Scaffolding.dll" #>
<#@ Assembly Name="$(SolutionDir)\Lyutemplate.Web\bin\Abp.dll" #>

<#@ assembly name="EnvDTE" #>
<#@ import namespace="System.IO" #>
<#@ Import Namespace="System.Linq" #>
<#@ Import Namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="Lyu.Scaffolding.Models" #>
<#@ import namespace="Lyu.Scaffolding.Scaffolders.Abp" #>
<#@ import namespace="Lyu.Scaffolding.Domain" #>
<#@ import namespace="Lyu.Scaffolding.Utils" #>
<#@ import namespace="Lyu.Scaffolding.Models" #>

<#@ include file="T4Toolbox.tt" #>
<#@ include file="AbpTemplate.tt" #>
<#@ include file="../CSharpHelpers.tt" #>

<#@ include file="Templates\Module\Application\IEntityAppService.tt" #>
<#@ include file="Templates\Module\Application\EntityAppService.tt" #>
<#@ include file="Templates\Module\Domain\Repositories\IRepository.tt" #>
<#@ include file="Templates\Module\Repository\Repositories\Repository.tt" #>

<#

			 byte[] fileData = System.IO.File.ReadAllBytes(@"C:\Users\q25a2\Downloads\LyuTemplate\LyuTemplate.Core\bin\Debug\Lyutemplate.Core.dll");

            Assembly assembly = Assembly.Load(fileData);
            
			 foreach (var type in assembly.GetTypes().Where(m => m.GetInterface("IEntity",true) != null && !m.IsAbstract))
            {
				var templateParams = new TemplateParams();
				templateParams.EntityName = type.Name;
				templateParams.entityName = ToCamelCase(templateParams.EntityName);
				templateParams.EntityNamespace = type.Namespace;
				templateParams.ModuleNamespace = getModuleNamespace(templateParams.EntityNamespace);
				templateParams.ModuleName = getModuleName(templateParams.ModuleNamespace);
				templateParams.FunctionFolderName = VmUtils.ToPlural(templateParams.ModuleName);
				templateParams.FunctionName ="FunctionName";
				templateParams.AllowBatchDelete = true;
				WriteLog(templateParams.EntityName);
				WriteLog(templateParams.entityName);
				WriteLog(templateParams.EntityNamespace);
				WriteLog(templateParams.ModuleNamespace);
				WriteLog(templateParams.ModuleName);
                MetaTableInfo dataModel = new MetaTableInfo();
                foreach (var propertyInfo in type.GetProperties())
                {
                    var metaColumnInfo = new MetaColumnInfo(propertyInfo);
                    dataModel.Columns.Add(metaColumnInfo);
                }
                templateParams.DtoMetaTable = dataModel;

				var templates = new AbpTemplate[]{
						new IEntityAppService(templateParams),
						new EntityAppService(templateParams),
						new Repository(templateParams),
						new IRepository(templateParams)
				 };
				string currentPath = Path.GetDirectoryName(Host.TemplateFile);
				string projectPath = currentPath.Substring(0, currentPath.IndexOf(@"\Scaffolders"));

				var functionFolderName = "functionFolderName";
				string outputPath = Path.Combine(projectPath,@"_GeneratedCode\");
				foreach(var template in templates){
					
					template.Output.Encoding = Encoding.UTF8;
					template.RenderToFile(Path.Combine(outputPath,template.FileName()));
				}
			}
				

   IServiceProvider serviceProvider = (IServiceProvider)this.Host;

#>



<#+

		private void WriteLog(string str)
        {
            File.AppendAllText("D:\\Scaffolder.log.txt", str + "\r\n");
        }

		private string getModuleName(string moduleNamespace)
        {
            return moduleNamespace.Split('.').Last();
        }

        private string getModuleNamespace(string entityNamespace)
        {
            var list = entityNamespace.Split('.').ToList();
            if (entityNamespace.Contains("YMC.Entities."))  //YMC.Entities.Content  
            {
                return "YMC.ECCentral." + list[2];
            }
            if (list.Contains("Domain"))  //命名空间包含Domain时， 去除Domain以后的
            {
                int index = list.IndexOf("Domain");
                if (index > 0)
                {
                    list.RemoveRange(index, list.Count - index);
                }
            }
            return string.Join(".", list);
        }
#>