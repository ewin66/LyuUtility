<#@ template language="C#" debug="True" #>
<#@ output extension="text" #>

<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="$(SolutionDir)\Lyu.Scaffolding\bin\Debug\Lyu.Scaffolding.dll" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System.IO" #>
<#@ Import Namespace="System.Linq" #>
<#@ Import Namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="Lyu.Scaffolding.Models" #>
<#@ import namespace="Lyu.Scaffolding.Scaffolders.Abp" #>
<#@ import namespace="Lyu.Scaffolding.Domain" #>
<#@ include file="T4Toolbox.tt" #>

<#@ include file="Templates\Module\{FunctionFolderName}\IEntityAppService.tt" #>

<#

			var type = typeof (Product);
            var templateParams = new TemplateParams();
            templateParams.EntityName = type.Name;
            templateParams.EntityNamespace = type.Namespace;
            templateParams.ModuleNamespace = getModuleNamespace(templateParams.EntityNamespace);
            templateParams.ModuleName = getModuleName(templateParams.ModuleNamespace);
		
		 var templates = new[] { 
						@"Application\{FunctionFolderName}\Dtos\{Entity}Dto.cs"
						, @"Application\{FunctionFolderName}\Dtos\{Entity}QueryDto.cs"
						, @"Application\{FunctionFolderName}\Dtos\Get{Entity}QueryInput.cs"
						, @"Application\{FunctionFolderName}\I{Entity}AppService.cs"
						, @"Application\{FunctionFolderName}\{Entity}AppService.cs"
						, @"Application\{FunctionFolderName}\_{Entity}Permissions.cs"
						, @"Domain\{FunctionFolderName}\Repositories\I{Entity}Repository.cs"
						, @"Repository\{FunctionFolderName}\Repositories\{Entity}Repository.cs"
					};

				string currentPath = Path.GetDirectoryName(Host.TemplateFile);
				string projectPath =currentPath.Substring(0, currentPath.IndexOf(@"\Scaffolders"));

				var functionFolderName = "functionFolderName";
			


				var iEntityAppService =  new IEntityAppService(templateParams);
				string outputPath = Path.Combine(projectPath,iEntityAppService.FileName());

				iEntityAppService.Output.Encoding = Encoding.UTF8;
				//iEntityAppService.RenderToFile(Path.Combine(projectPath,iEntityAppService.FileName()));
   


   IServiceProvider serviceProvider = (IServiceProvider)this.Host;

#>
//currentPath <#=currentPath#> 
//projectPath <#=projectPath#> 
//projectPath <#=Path.Combine(projectPath, "as.cs")#> 
//this.Host.TemplateFile <#=this.Host.TemplateFile#> 
//this.Host.TemplateFile <#=serviceProvider#> 
//templateParams.EntityName: <#=templateParams.EntityName#> 
//templateParams.EntityNamespace: <#=templateParams.EntityNamespace#> 
//templateParams.ModuleName: <#=templateParams.ModuleName#> 
//iEntityAppService.FileName: <#=iEntityAppService.FileName()#> 
//outputPath: <#=outputPath#> 

<#+

		private void WriteLog(string str)
        {
            File.AppendAllText("D:\\Scaffolder.log.txt", str + "\r\n");
        }

		private string getModuleName(string moduleNamespace)
        {
            return moduleNamespace.Split('.').Last();
        }

        private string getModuleNamespace(string entityNamespace)
        {
            var list = entityNamespace.Split('.').ToList();
            if (entityNamespace.Contains("YMC.Entities."))  //YMC.Entities.Content  
            {
                return "YMC.ECCentral." + list[2];
            }
            if (list.Contains("Domain"))  //命名空间包含Domain时， 去除Domain以后的
            {
                int index = list.IndexOf("Domain");
                if (index > 0)
                {
                    list.RemoveRange(index, list.Count - index);
                }
            }
            return string.Join(".", list);
        }
#>